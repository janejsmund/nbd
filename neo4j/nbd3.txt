1. MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies) RETURN hugo,hugoWeavingMovies
2. MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies)<-[:DIRECTED]-(directors) RETURN directors.name
3. MATCH (tom:Person {name:"Hugo Weaving"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN coActors
4. MATCH (person:Person)-[:ACTED_IN]->(films) RETURN person.name,count(films)
5. MATCH (person:Person)-[:WROTE]-(movie)-[:DIRECTED]-(person) return distinct person.name, movie.title
6. MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]-(movie)-[:ACTED_IN]-(keanu:Person {name: "Keanu Reeves"}) return movie
7. 

CREATE (CaptainAmerica:Movie {title:'Captain America: The First Avenger', released:2011, tagline:'Do you want to kill Nazis?'})
CREATE (JoeJohnston:Person {name:'Joe Johnston', born:1964})
CREATE (ChristopherMarkus:Person {name:'Christopher Markus', born:1967})
CREATE (StephenMcFeely:Person {name:'Stephen McFeely', born:1961})
CREATE (ChrisEvans:Person {name:'Chris Evans', born:1960})
CREATE (HugoWeaving:Person {name:'Hugo Weaving', born:1967})
CREATE (Samuel:Person {name:'Samuel L. Jackson', born:1965})
CREATE
	(ChrisEvans)-[:ACTED_IN {roles:['Captain America']}]->(CaptainAmerica),
	(HugoWeaving)-[:ACTED_IN {roles:['Red Skull']}]->(CaptainAmerica),
	(Samuel)-[:ACTED_IN {roles:['Nick Fury']}]->(CaptainAmerica),
	(ChristopherMarkus)-[:WROTE]->(CaptainAmerica),
	(StephenMcFeely)-[:WROTE]->(CaptainAmerica)

MATCH (m:Movie {title: "Captain America: The First Avenger"})<-[:ALL]-(p:Person) RETURN m,p

8. match (t:town {name:"Darjeeling"})-[r*..5]-(p:peak {name:"Sandakphu"}) return distinct r
9. MATCH r=allShortestPaths((t:town{name:'Darjeeling'})-[*]-(p:peak{name:'Sandakphu'})) return r
10. MATCH path=allShortestPaths((t:town{name:'Darjeeling'})-[*]->(p:peak{name:'Sandakphu'})) where all (r in rels(path) where r.winter='true') return nodes(path)
11. match (t:town {name:"Darjeeling"})-[r*..5]-(p:peak {name:"Sandakphu"}) return r order by distance(t, p)
12. match (t:town {name:"Darjeeling"})-[r:twowheeler {summer:'true'}]->(any) return r
13. match (t:town {name:"Darjeeling"})-[r:twowheeler {summer:'true'}]->(any) return r


14. MATCH (f0)-[o:ORIGIN]->(a:Airport) return a, count(o) order by count(o) desc
15. match (f0:Flight)-[:ORIGIN]-(:Airport {name:'LAX'}) with f0 match (f0)-[:DESTINATION]-(a1:Airport) with f0, a1 match (f1)-[:ORIGIN]-(a1) with f0, f1, a1 match (f1)-[:DESTINATION]-(a2:Airport) with f0, f1, a1, a2 match (f2)-[:ORIGIN]-(a2) with f0, f1, f2, a1, a2 match (f2)-[:DESTINATION]-(a3:Airport) with f0, f1, f2, a1, a2, a3 match (t0:Ticket)-[:ASSIGN]-(f0) with t0, f1, f2, a1, a2, a3 match (t1:Ticket)-[:ASSIGN]-(f1) with t0, t1, f2, a1, a2, a3 match (t2:Ticket)-[:ASSIGN]-(f2) where t0.price+t1.price+t2.price < 3000 return distinct coalesce(coalesce(a1, []), coalesce(a2, []), coalesce(a3, []))
//tu zaniemogłem
//stworzyłem nowe relacje
// MATCH (a:Airport)<-[:ORIGIN]-(f)-[:DESTINATION]->(b:Airport), (f)<-[:ASSIGN]-(t) CREATE (a)-[:ANY {price: t.price, class: t.class, airline: f.airline}]->(b)
// MATCH (a:Airport)<-[:ORIGIN]-(f)-[:DESTINATION]->(b:Airport), (f)<-[:ASSIGN]-(t) WITH min(t.price) as lowPrice, a, b MATCH (f)<-[:ASSIGN]-(t {price: lowPrice}) CREATE (a)-[:CHEAP {price: t.price, class: t.class, airline: f.airline}]->(b)
16. MATCH (a:Airport {name: "LAX"})-[any:ANY*..5]->(:Airport {name: "DAY"}) WITH REDUCE (price = 0, p in any | price + p.price) as total, any RETURN any, total ORDER BY total
17. MATCH (a:Airport {name: "LAX"})-[cheap:CHEAP*..4]->(:Airport {name: "DAY"}) WITH REDUCE (price = 0, p in cheap | price + p.price) as total, conn RETURN conn, total ORDER BY total LIMIT 1
18. MATCH path = (a:Airport {name: "LAX"})-[any:ANY*..3 {class:"business"}]->(:Airport {name: "DAY"}) WITH REDUCE(price = 0, p in any | price + p.price) as total, path, any RETURN path, any, total ORDER BY total LIMIT 1
19. match  (a:Airport)-[:ORIGIN]-(f:Flight) with a,f match  (a:Airport)-[:DESTINATION]-(f:Flight) return distinct f.airline, count(distinct a.name) order by count(distinct a.name) desc
20. MATCH (a:Airport),(b:Airport),(c:Airport) WITH a, b, c MATCH path0 = (a)-[cheap0:CHEAP]->(b) MATCH path1 = (b)-[cheap1:CHEAP]->(c) WHERE NOT a.name = c.name WITH (cheap0.price + cheap1.price) as total, path0, path1, cheap0, cheap1 RETURN path0, path1, cheap0, cheap1, total ORDER BY total LIMIT 1
